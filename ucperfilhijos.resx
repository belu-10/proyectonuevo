<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        KefzAAAAAElFTkSuQmCC
</value>
  </data>
</root>